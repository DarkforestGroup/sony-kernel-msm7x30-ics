--- drivers/net/wireless/b43/b43.h
+++ drivers/net/wireless/b43/b43.h
@@ -695,7 +694,6 @@
 	bool radio_hw_enable;	/* saved state of radio hardware enabled state */
 	bool qos_enabled;		/* TRUE, if QoS is used. */
 	bool hwcrypto_enabled;		/* TRUE, if HW crypto acceleration is enabled. */
-	bool use_pio;			/* TRUE if next init should use PIO */
 
 	/* PHY/Radio device. */
 	struct b43_phy phy;
@@ -830,9 +834,15 @@
 	/* The device LEDs. */
 	struct b43_leds leds;
 
-	/* Kmalloc'ed scratch space for PIO TX/RX. Protected by wl->mutex. */
-	u8 pio_scratchspace[110] __attribute__((__aligned__(8)));
-	u8 pio_tailspace[4] __attribute__((__aligned__(8)));
+#ifdef CONFIG_B43_PIO
+	/*
+	 * RX/TX header/tail buffers used by the frame transmit functions.
+	 */
+	struct b43_rxhdr_fw4 rxhdr;
+	struct b43_txhdr txhdr;
+	u8 rx_tail[4];
+	u8 tx_tail[4];
+#endif /* CONFIG_B43_PIO */
 };
 
 static inline struct b43_wl *hw_to_b43_wl(struct ieee80211_hw *hw)
@@ -883,15 +893,20 @@
 
 static inline bool b43_using_pio_transfers(struct b43_wldev *dev)
 {
+#ifdef CONFIG_B43_PIO
 	return dev->__using_pio_transfers;
+#else
+	return 0;
+#endif
 }
 
 #ifdef CONFIG_B43_FORCE_PIO
-# define B43_PIO_DEFAULT 1
+# define B43_FORCE_PIO	1
 #else
-# define B43_PIO_DEFAULT 0
+# define B43_FORCE_PIO	0
 #endif
 
+
 /* Message printing */
 void b43info(struct b43_wl *wl, const char *fmt, ...)
     __attribute__ ((format(printf, 2, 3)));
